package com.experis.movie_character_api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.jpa.domain.AbstractPersistable;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Entity
@AllArgsConstructor @NoArgsConstructor @Data
@JsonInclude(JsonInclude.Include.NON_NULL)
// ignore the "new" field generated by the AbstractPersistable class
@JsonIgnoreProperties({ "new" })
public class Character extends AbstractPersistable<Long> {

    @JsonProperty("full_name")
    private String fullName;

    @JsonProperty("alias")
    private String alias; // if applicable

    @JsonProperty("gender")
    @Enumerated(EnumType.ORDINAL)
    private Gender gender;

    @JsonProperty("picture_url")
    private String pictureUrl;

    @JsonProperty("movies")
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "characters")
    private List<Movie> movies = new ArrayList<>();

    @JsonGetter("movies")
    public List<String> moviesGetter() {
        return movies.stream()
                .map(movie -> "/api/v1/movies/" + movie.getId())
                .collect(Collectors.toList());
    }
}

// Hibernate maps Gender enum to its ordinal value in the enum class,
// so do not change the order of genders in the class
enum Gender {
    male,
    female,
    other
}
